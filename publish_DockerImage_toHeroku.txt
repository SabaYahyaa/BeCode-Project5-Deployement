Futeure Work

this is if we want to create a mongodb, data base and put it in the heroku page

https://docs.mongodb.com/compass/master/schema/export

NOTE::::::
we have to create a mongodb, to store our data then a user can enter a new x_train (scrab a new sample)
The new sample have to go to database and we update our X_train and the fitting to ML regressor.
This should be in a route (Flask) that does te scrab to a nex sample.






Docker hub account, id=sabayahyaa, pass=Misk2013+
we need to cd where the Dockerfile, the code folder are


Heroku log in: sabayahyaa@gmail.com, pass=Misk2013+
https://medium.com/@deepakshakya/beginners-guide-to-use-docker-build-run-push-and-pull-4a132c094d75

we are at:::: saba@saba-HP-EliteBook-840-G1:~/PycharmProjects/testing/Deployement/FlaskIntroduction/Project5-Api_deployment$

First delete all docker container by: docker stop container_ID
				      docker rm container_ID
then remove image        docker rm image_id
																					  
After creating: 
1. using our real_state_data.csv, I cleaned it then I used all data to train a Linear regression model
2. the client will give us features that stored in a json file
3. we ceate a flask web, we run it locally using 5000 port
4. we create a Dockerfile, inside it there is all necessary packages that we use
5. we need postman to enter the json file and get the prediction
5. also all packages is in requirements.txt
6. create an image using the Dockerfile
 	     
   build an img:             docker build -t image_flask:v1 .
you must get, 
  run a container:           docker run -d  -p 5000:5000 image_flask:v1

6. create a Heroku, so that users can use my application, (run app_project.py immediately), 
sabayahyaa is any name

   heroku container:login
   heroku create sabayahyaa  or predict-lr
   heroku container:push web -a sabayahyaa
   heroku container:release web --app sabayahyaa

Then if I go to webbrowser:::    https://dashboard.heroku.com/apps/sabayahyaa
my application shall run.

my application does not run, so I went to the command window, I write the following to see what is the problem
    heroku logs --tail -a sabayahyaa




Note;;;;;;;;;;;;;;;;;;;;;;;;  Heroku, this is without creating a Docker Images
Note we do not need to create a docker image, it will be crreated automatically

heroku login
heroku container:login (sabayahyaa@gmail.com, pass=Misk2013+
heroku create    <heroku repository name, (i.e., predict-lr)>  ----- to create a repository in herokku ------
heroku container:push web -a <heroku repository name>
heroku container:release web -a <heroku repository name>



then:::  https://dashboard.heroku.com/, choose predict-lr then open app
     copy the link https://predict-lr.herokuapp.com/ and put it in postman to see the result of prediction
   
https://becode-predict-ades.herokuapp.com/ is our project

goto
https://becode-predict-ades.herokuapp.com/predict get the following:
 Here is the data format for the POST request:
            {
                "data": {
                        "area": int,
                        "property-type": "APARTMENT" | "HOUSE" | "OTHERS",
                        "rooms-number": int,
                        "zip-code": int,
                        "land-area": Optional[int],
                        "garden": Optional[bool],
                        "garden-area": Optional[int],
                        "equipped-kitchen": Optional[bool],
                        "full-address": Optional[str],
                        "swimmingpool": Opional[bool],
                        "furnished": Opional[bool],
                        "open-fire": Optional[bool],
                        "terrace": Optional[bool],
                        "terrace-area": Optional[int],
                        "facades-number": Optional[int],
                        "building-state": Optional["NEW" | "GOOD" | "TO RENOVATE" | "JUST RENOVATED" | "TO REBUILD"]
                }
            }
         
goto
https://becode-predict-ades.herokuapp.com/, you get the following
Alive

Goto post man to put your json that you want to predict:::::
 select post, then Body, then raw, specify your file is Json, then 
on the url, near post https://becode-predict-ades.herokuapp.com/predict

then press send, you will get the prediction












